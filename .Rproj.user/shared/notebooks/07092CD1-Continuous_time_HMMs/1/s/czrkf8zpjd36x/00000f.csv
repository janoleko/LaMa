"0","mllk = function(theta.star, timediff, x, N=2){"
"0","  mu = theta.star[1:N]"
"0","  sigma = exp(theta.star[N+1:N])"
"0","  Q = diag(N) # generator matrix"
"0","  Q[!Q] = exp(theta.star[2*N+1:(N*(N-1))])"
"0","  diag(Q) = 0"
"0","  diag(Q) = -rowSums(Q)"
"0","  delta = solve(t(Q+1), rep(1,N), tol = 1e-20) # stationary distribution of the"
"0","  # continuous-time Markov chain"
"0","  Qube = LaMa::tpm_cont(Q, timediff) # this computes exp(Q*timediff)"
"0","  allprobs = matrix(1, nrow = length(x), ncol = N)"
"0","  ind = which(!is.na(x))"
"0","  for(j in 1:N){"
"0","    allprobs[ind,j] = dnorm(x[ind], mu[j], sigma[j])"
"0","  }"
"0","  -LaMa::forward_g(delta, Qube, allprobs)"
"0","}"
