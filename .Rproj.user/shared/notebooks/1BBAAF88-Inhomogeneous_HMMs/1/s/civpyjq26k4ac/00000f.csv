"0","mllk_npreg = function(theta.star, x, Z, lambda){"
"0","  Gamma = tpm(theta.star[1:2]) # homogeneous tpm"
"0","  delta = stationary(Gamma) # stationary Markov chain"
"0","  beta = matrix(theta.star[2+1:(2+2*ncol(Z))], nrow = 2)"
"0","  sigma = exp(theta.star[2+2+2*ncol(Z) + 1:2])"
"0","  # calculate all state-dependent probabilities"
"0","  allprobs = matrix(1, length(x), 2)"
"0","  # state-dependent regression"
"0","  for(j in 1:2){ allprobs[,j] = dnorm(x, cbind(1,Z)%*%beta[j,], sigma[j]) }"
"0","  # return negative for minimization"
"0","  l = forward(delta, Gamma, allprobs)"
"0","  # penalize curvature"
"0","  penalty = sum(diff(beta[1,-1], differences = 3)^2)+"
"0","    sum(diff(beta[2,-1], differences = 3)^2)"
"0","  return(-l + lambda*penalty)"
"0","}"
