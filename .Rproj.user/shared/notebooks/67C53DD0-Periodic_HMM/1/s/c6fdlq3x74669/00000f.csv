"0","mllk = function(theta.star, x, z){"
"0","  beta = matrix(theta.star[1:10], nrow = 2) # matrix of coefficients"
"0","  Gamma = tpm_p(tod = 1:48, L = 48, beta = beta, degree = 2) # calculating all L tpms"
"0","  delta = stationary_p(Gamma, t = z[1]) # periodically stationary start"
"0","  mu = theta.star[11:12]"
"0","  sigma = exp(theta.star[13:14])"
"0","  # calculate all state-dependent probabilities"
"0","  allprobs = matrix(1, length(x), 2)"
"0","  for(j in 1:2){ allprobs[,j] = stats::dnorm(x, mu[j], sigma[j]) }"
"0","  # return negative for minimization"
"0","  -forward_p(delta, Gamma, allprobs, z)"
"0","}"
