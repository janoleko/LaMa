"0","mllk = function(theta.star, x, N, agsizes){"
"0","  mu = theta.star[1:N]"
"0","  sigma = exp(theta.star[N+1:N])"
"0","  lambda = exp(theta.star[2*N+1:N])"
"0","  if(N>2){ "
"0","    # this is a bit complicated as we need the diagonal elements to be zero"
"0","    omega = matrix(0,N,N)"
"0","    omega[!diag(N)] = as.vector(t(matrix(c(rep(1,N),"
"0","                          exp(theta.star[3*N+1:(N*(N-2))])),N,N-1)))"
"0","    omega = t(omega)/apply(omega,2,sum)"
"0","  } else{ omega = matrix(c(0,1,1,0),2,2) }"
"0","  dm = list() # list of dwell-time distributions"
"0","  for(j in 1:N){ dm[[j]] = dpois(1:agsizes[j]-1, lambda[j]) } # shifted Poisson"
"0","  Gamma = LaMa::tpm_hsmm(omega, dm)"
"0","  delta = LaMa::stationary(Gamma)"
"0","  allprobs = matrix(1, length(x), N)"
"0","  ind = which(!is.na(x))"
"0","  for(j in 1:N){"
"0","    allprobs[ind,j] = dnorm(x[ind], mu[j], sigma[j])"
"0","  }"
"0","  -LaMa::forward_s(delta, Gamma, allprobs, agsizes)"
"0","}"
